"""
Trading Portfolio Dashboard with OneDrive Integration
====================================================
Support pro Excel i SQLite soubory z OneDrive
"""

import streamlit as st
import sqlite3
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
import re
import os
import requests
import tempfile
import io

# Konfigurace str√°nky
st.set_page_config(
    page_title="Trading Portfolio Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Konfigurace
INITIAL_CAPITAL = 50000

# Session state pro OneDrive URL
if 'onedrive_url' not in st.session_state:
    st.session_state.onedrive_url = "YOUR_ONEDRIVE_SHARE_URL_HERE"

def convert_onedrive_url_to_direct(share_url):
    """Konvertuje OneDrive share URL na direct download URL"""
    try:
        if "1drv.ms" in share_url:
            if "?" in share_url:
                direct_url = share_url + "&download=1"
            else:
                direct_url = share_url + "?download=1"
            return direct_url
        elif "onedrive.live.com" in share_url:
            direct_url = share_url.replace("redir?", "download?")
            return direct_url
        elif "sharepoint.com" in share_url or "-my.sharepoint.com" in share_url:
            if "?" in share_url:
                direct_url = share_url + "&download=1"
            else:
                direct_url = share_url + "?download=1"
            return direct_url
        return share_url
    except Exception as e:
        st.error(f"Chyba p≈ôi konverzi URL: {e}")
        return share_url

def detect_file_type(content, content_type):
    """Detekuje typ souboru podle obsahu a content-type"""
    
    # SQLite datab√°ze
    if content.startswith(b'SQLite format 3'):
        return 'sqlite'
    
    # Excel soubory
    if (content_type and 'spreadsheet' in content_type.lower()) or \
       (content_type and 'excel' in content_type.lower()) or \
       content.startswith(b'PK\x03\x04'):  # ZIP signature (Excel je ZIP archiv)
        return 'excel'
    
    # CSV soubory
    if content_type and 'csv' in content_type.lower():
        return 'csv'
    
    return 'unknown'

def load_data_from_excel_content(content):
    """Naƒçte data z Excel obsahu"""
    try:
        # Naƒç√≠st Excel z bytes
        excel_file = io.BytesIO(content)
        
        # Naj√≠t sheet s daty (zkusit r≈Øzn√© mo≈æn√© n√°zvy)
        possible_sheets = ['diary', 'trades', 'Sheet1', 'Data', 'Portfolio']
        
        # Naƒç√≠st v≈°echny sheets
        try:
            excel_data = pd.read_excel(excel_file, sheet_name=None)  # Naƒçte v≈°echny sheets
            st.write(f"üîç **Nalezen√© sheets:** {list(excel_data.keys())}")
        except Exception as e:
            st.error(f"Chyba p≈ôi ƒçten√≠ Excel souboru: {e}")
            return pd.DataFrame()
        
        # Naj√≠t spr√°vn√Ω sheet
        target_df = None
        for sheet_name in possible_sheets:
            if sheet_name in excel_data:
                target_df = excel_data[sheet_name]
                st.success(f"‚úÖ **Pou≈æit sheet:** {sheet_name}")
                break
        
        # Pokud nenajde specifick√Ω sheet, pou≈æij prvn√≠
        if target_df is None and excel_data:
            first_sheet = list(excel_data.keys())[0]
            target_df = excel_data[first_sheet]
            st.info(f"üìã **Pou≈æit prvn√≠ sheet:** {first_sheet}")
        
        if target_df is None:
            st.error("‚ùå ≈Ω√°dn√Ω vhodn√Ω sheet nenalezen")
            return pd.DataFrame()
        
        # Zobrazit uk√°zku dat pro debug
        st.write("**üîç Uk√°zka naƒçten√Ωch dat:**")
        st.write(f"**Sloupce:** {list(target_df.columns)}")
        st.dataframe(target_df.head())
        
        # Mapov√°n√≠ sloupc≈Ø (pokusit se naj√≠t spr√°vn√© sloupce)
        column_mapping = {}
        
        # Naj√≠t sloupce podle n√°zv≈Ø
        for col in target_df.columns:
            col_lower = str(col).lower()
            
            if 'strategy' in col_lower or 'strategie' in col_lower:
                column_mapping['strategy'] = col
            elif 'exit' in col_lower and 'date' in col_lower:
                column_mapping['exitDate'] = col
            elif 'entry' in col_lower and 'date' in col_lower:
                column_mapping['entryDate'] = col
            elif 'net' in col_lower and ('p' in col_lower or 'l' in col_lower):
                column_mapping['netPL'] = col
            elif col_lower in ['pl', 'p&l', 'profit', 'netpl']:
                column_mapping['netPL'] = col
            elif 'ticker' in col_lower or 'symbol' in col_lower:
                column_mapping['ticker'] = col
            elif 'quantity' in col_lower or 'qty' in col_lower:
                column_mapping['quantity'] = col
            elif 'entry' in col_lower and 'price' in col_lower:
                column_mapping['entryPrice'] = col
            elif 'exit' in col_lower and 'price' in col_lower:
                column_mapping['exitPrice'] = col
            elif 'comm' in col_lower:
                column_mapping['commission'] = col
        
        st.write(f"**üîó Mapov√°n√≠ sloupc≈Ø:** {column_mapping}")
        
        # Zkontrolovat, jestli m√°me pot≈ôebn√© sloupce
        required_columns = ['strategy', 'exitDate', 'netPL']
        missing_columns = [col for col in required_columns if col not in column_mapping]
        
        if missing_columns:
            st.error(f"‚ùå **Chyb√≠ sloupce:** {missing_columns}")
            st.info("üí° **Tip:** Ujistƒõte se, ≈æe Excel obsahuje sloupce: strategy, exitDate, NetP/L")
            return pd.DataFrame()
        
        # P≈ôejmenovat sloupce
        df = target_df.rename(columns={v: k for k, v in column_mapping.items()})
        
        # Z√°kladn√≠ ƒçi≈°tƒõn√≠ dat
        df = df[df['strategy'].notna()]
        df = df[df['exitDate'].notna()]
        df = df[df['netPL'].notna()]
        
        # Konverze typ≈Ø
        df['exitDate'] = pd.to_datetime(df['exitDate'], errors='coerce')
        if 'entryDate' in df.columns:
            df['entryDate'] = pd.to_datetime(df['entryDate'], errors='coerce')
        df['netPL'] = pd.to_numeric(df['netPL'], errors='coerce')
        
        # Koneƒçn√© ƒçi≈°tƒõn√≠
        df = df.dropna(subset=['exitDate', 'netPL'])
        
        st.success(f"‚úÖ **√öspƒõ≈°nƒõ naƒçteno {len(df)} z√°znam≈Ø z Excel souboru!**")
        
        return df
        
    except Exception as e:
        st.error(f"Chyba p≈ôi zpracov√°n√≠ Excel souboru: {e}")
        return pd.DataFrame()

def load_data_from_sqlite_content(content):
    """Naƒçte data z SQLite obsahu"""
    try:
        # Ulo≈æit do doƒçasn√©ho souboru
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".db3")
        temp_file.write(content)
        temp_file.close()
        
        # Naƒç√≠st data z datab√°ze
        conn = sqlite3.connect(temp_file.name)
        
        query = """
        SELECT 
            strategy,
            exitDate,
            "NetP/L" as netPL,
            entryDate,
            ticker,
            quantity,
            entryPrice,
            exitPrice,
            commission
        FROM diary 
        WHERE exitDate IS NOT NULL 
        AND "NetP/L" IS NOT NULL 
        AND strategy IS NOT NULL
        ORDER BY exitDate
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        # Vyƒçistit doƒçasn√Ω soubor
        os.unlink(temp_file.name)
        
        # Zpracov√°n√≠ dat
        df['exitDate'] = pd.to_datetime(df['exitDate'], errors='coerce')
        df['entryDate'] = pd.to_datetime(df['entryDate'], errors='coerce')
        df['netPL'] = pd.to_numeric(df['netPL'], errors='coerce')
        df = df.dropna(subset=['exitDate', 'netPL'])
        
        return df
        
    except Exception as e:
        st.error(f"Chyba p≈ôi zpracov√°n√≠ SQLite souboru: {e}")
        return pd.DataFrame()

def try_download_and_process(share_url, filename):
    """Zkus√≠ st√°hnout a zpracovat soubor z OneDrive"""
    
    methods = [
        convert_onedrive_url_to_direct(share_url),
        share_url.replace("/s/", "/download/s/") if "/s/" in share_url else None,
    ]
    
    methods = [m for m in methods if m is not None]
    
    for i, url in enumerate(methods, 1):
        st.write(f"üîÑ **Zkou≈°√≠m metodu {i}:** {url[:60]}...")
        
        try:
            response = requests.get(url, stream=True, timeout=30)
            
            # Debug informace
            st.write(f"   üìä **Status:** {response.status_code}")
            st.write(f"   üìã **Content-Type:** {response.headers.get('content-type', 'N/A')}")
            st.write(f"   üìè **Velikost:** {len(response.content):,} byt≈Ø")
            
            if response.status_code != 200:
                st.warning(f"   ‚ö†Ô∏è Status {response.status_code}")
                continue
                
            # Zkontrolovat, jestli je to HTML (error page)
            if response.content.startswith(b'<!DOCTYPE') or b'<html' in response.content[:500]:
                st.warning(f"   ‚ö†Ô∏è Metoda {i}: HTML odpovƒõƒè (pravdƒõpodobnƒõ error page)")
                continue
            
            # Detekovat typ souboru
            content_type = response.headers.get('content-type', '')
            file_type = detect_file_type(response.content, content_type)
            
            st.info(f"   üîç **Detekovan√Ω typ:** {file_type}")
            
            if file_type == 'sqlite':
                st.success(f"   ‚úÖ Metoda {i}: SQLite datab√°ze!")
                return load_data_from_sqlite_content(response.content)
                
            elif file_type == 'excel':
                st.success(f"   ‚úÖ Metoda {i}: Excel soubor!")
                return load_data_from_excel_content(response.content)
                
            else:
                st.warning(f"   ‚ö†Ô∏è Metoda {i}: Nepodporovan√Ω form√°t")
                st.code(f"Prvn√≠ bytes: {response.content[:100]}")
                
        except Exception as e:
            st.error(f"   ‚ùå Metoda {i}: Chyba - {e}")
            continue
    
    return pd.DataFrame()

def manual_onedrive_config():
    """Ruƒçn√≠ konfigurace OneDrive linku"""
    st.subheader("üîß Konfigurace OneDrive")
    
    with st.expander("üìã Jak z√≠skat spr√°vn√Ω OneDrive link", expanded=True):
        st.markdown("""
        ### ‚úÖ Doporuƒçen√Ω postup:
        1. **Jdƒõte na** [onedrive.live.com](https://onedrive.live.com)
        2. **Najdƒõte** v√°≈° soubor (`.db3` nebo `.xlsx`)
        3. **Kliknƒõte na t≈ôi teƒçky** (...) vedle souboru
        4. **Vyberte "Share"**
        5. **Nastavte "Anyone with the link can view"**
        6. **Zkop√≠rujte cel√Ω URL**
        
        ### üìä Podporovan√© form√°ty:
        - **SQLite datab√°ze** (`.db3`, `.sqlite`)
        - **Excel soubory** (`.xlsx`, `.xls`)
        - **CSV soubory** (`.csv`)
        """)
    
    # Input pro URL
    user_url = st.text_input(
        "üìé Vlo≈æte v√°≈° OneDrive share URL:",
        value=st.session_state.onedrive_url if st.session_state.onedrive_url != "YOUR_ONEDRIVE_SHARE_URL_HERE" else "",
        placeholder="https://1drv.ms/... (Excel nebo SQLite soubor)",
        help="URL na v√°≈° OneDrive soubor s trading daty"
    )
    
    if user_url and user_url != st.session_state.onedrive_url:
        st.session_state.onedrive_url = user_url
    
    if user_url:
        if st.button("üß™ Testovat OneDrive link"):
            with st.spinner("Testuji sta≈æen√≠ a zpracov√°n√≠ souboru..."):
                result_df = try_download_and_process(user_url, "trading_data")
                
                if not result_df.empty:
                    st.success("üéâ **√öspƒõch!** Data byla naƒçtena!")
                    st.info(f"üìä **Naƒçteno:** {len(result_df)} z√°znam≈Ø")
                    st.info(f"üìà **Strategie:** {', '.join(result_df['strategy'].unique())}")
                    
                    # Ulo≈æit √∫spƒõ≈°n√Ω URL
                    st.session_state.onedrive_url = user_url
                    st.session_state.onedrive_working = True
                    
                    return user_url, result_df
                else:
                    st.error("‚ùå **Nepoda≈ôilo se naƒç√≠st data**")
                    st.markdown("""
                    ### üõ†Ô∏è Mo≈æn√° ≈ôe≈°en√≠:
                    1. **Zkontrolujte opr√°vnƒõn√≠** - soubor mus√≠ b√Ωt ve≈ôejnƒõ p≈ô√≠stupn√Ω
                    2. **Zkontrolujte form√°t** - podporujeme Excel a SQLite
                    3. **Zkontrolujte obsah** - mus√≠ obsahovat sloupce strategy, exitDate, NetP/L
                    """)
    
    return user_url, pd.DataFrame()

def load_data_from_onedrive():
    """Naƒçte data z OneDrive pomoc√≠ konfigurovan√©ho URL"""
    onedrive_url = st.session_state.onedrive_url
    
    if not onedrive_url or onedrive_url == "YOUR_ONEDRIVE_SHARE_URL_HERE":
        st.error("üîó OneDrive URL nen√≠ nakonfigurov√°n!")
        configured_url, test_df = manual_onedrive_config()
        return test_df
    
    # Pokusit se naƒç√≠st data
    df = try_download_and_process(onedrive_url, "trading_data")
    
    if df.empty:
        st.error("‚ùå Nepoda≈ôilo se naƒç√≠st data z OneDrive")
        # Zobrazit konfiguraƒçn√≠ panel pro opravu
        configured_url, test_df = manual_onedrive_config()
        return test_df
    
    return df

def load_data_from_uploaded_file(uploaded_file):
    """Naƒçte data z nahran√©ho souboru (fallback)"""
    try:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        if file_extension in ['xlsx', 'xls']:
            # Excel soubor
            return load_data_from_excel_content(uploaded_file.read())
        
        elif file_extension in ['db3', 'db', 'sqlite']:
            # SQLite datab√°ze
            return load_data_from_sqlite_content(uploaded_file.read())
        
        else:
            st.error(f"‚ùå Nepodporovan√Ω form√°t: {file_extension}")
            return pd.DataFrame()
        
    except Exception as e:
        st.error(f"Chyba p≈ôi zpracov√°n√≠ nahran√©ho souboru: {e}")
        return pd.DataFrame()

def calculate_portfolio_metrics(df):
    """Vypoƒç√≠t√° portfolio metriky"""
    if df.empty:
        return {}
    
    total_pl = df['netPL'].sum()
    total_pl_percent = (total_pl / INITIAL_CAPITAL) * 100
    total_trades = len(df)
    winning_trades = len(df[df['netPL'] > 0])
    win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
    
    return {
        'total_pl': total_pl,
        'total_pl_percent': total_pl_percent,
        'total_capital': INITIAL_CAPITAL + total_pl,
        'total_trades': total_trades,
        'winning_trades': winning_trades,
        'win_rate': win_rate
    }

def create_simple_chart(df):
    """Vytvo≈ô√≠ jednoduch√Ω kumulativn√≠ graf"""
    if df.empty:
        return go.Figure()
    
    df_sorted = df.sort_values('exitDate')
    df_sorted['cumulative_pl'] = df_sorted['netPL'].cumsum()
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=df_sorted['exitDate'],
        y=df_sorted['cumulative_pl'],
        mode='lines+markers',
        name='Kumulativn√≠ P&L',
        line=dict(color='#1f77b4', width=3),
        marker=dict(size=4)
    ))
    
    fig.update_layout(
        title="üìà Kumulativn√≠ P&L",
        xaxis_title="Datum",
        yaxis_title="P&L (USD)",
        template='plotly_white',
        height=500
    )
    
    return fig

# Hlavn√≠ aplikace
def main():
    st.title("üìä Trading Portfolio Dashboard")
    st.subheader("OneDrive Integration - Support pro Excel i SQLite")
    
    st.sidebar.header("üìÅ Zdroj dat")
    
    data_source = st.sidebar.radio(
        "Vyberte zdroj dat:",
        ["üîó OneDrive (Automaticky)", "üìÅ Nahr√°t soubor"]
    )
    
    df = pd.DataFrame()
    
    if data_source == "üîó OneDrive (Automaticky)":
        # OneDrive naƒç√≠t√°n√≠
        df = load_data_from_onedrive()
        
        if not df.empty:
            last_update = datetime.now().strftime("%H:%M:%S")
            st.sidebar.success(f"‚úÖ Data naƒçtena z OneDrive\nüïê {last_update}")
            
            if st.sidebar.button("üîÑ Aktualizovat"):
                st.rerun()
    
    else:
        # Fallback upload
        uploaded_file = st.sidebar.file_uploader(
            "Nahrajte soubor:",
            type=['db3', 'db', 'sqlite', 'xlsx', 'xls'],
            help="SQLite datab√°ze nebo Excel soubor"
        )
        
        if uploaded_file is not None:
            with st.spinner("Zpracov√°v√°m nahran√Ω soubor..."):
                df = load_data_from_uploaded_file(uploaded_file)
    
    # Zobrazen√≠ dat
    if df.empty:
        if data_source == "üîó OneDrive (Automaticky)":
            st.info("üîß Nakonfigurujte OneDrive p≈ô√≠stup v√Ω≈°e")
        else:
            st.info("üìÅ Nahrajte Excel nebo SQLite soubor v postrann√≠m panelu")
        return
    
    st.success(f"‚úÖ Naƒçteno {len(df)} obchod≈Ø ze strategi√≠: {', '.join(df['strategy'].unique())}")
    
    # Z√°kladn√≠ metriky
    metrics = calculate_portfolio_metrics(df)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üí∞ Total P&L", f"${metrics.get('total_pl', 0):,.2f}")
    
    with col2:
        st.metric("üìä Celkov√Ω kapit√°l", f"${metrics.get('total_capital', INITIAL_CAPITAL):,.2f}")
    
    with col3:
        st.metric("üéØ Win Rate", f"{metrics.get('win_rate', 0):.1f}%")
    
    # Graf
    st.subheader("üìà Kumulativn√≠ P&L")
    fig = create_simple_chart(df)
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabulka strategi√≠
    st.subheader("üìã P≈ôehled strategi√≠")
    if not df.empty:
        strategy_summary = df.groupby('strategy')['netPL'].agg(['sum', 'count']).round(2)
        strategy_summary.columns = ['Celkov√Ω P&L ($)', 'Poƒçet obchod≈Ø']
        st.dataframe(strategy_summary, use_container_width=True)
    
    # Debug informace
    with st.expander("üîß Debug informace"):
        st.write("**Struktura dat:**")
        st.write(f"Poƒçet ≈ô√°dk≈Ø: {len(df)}")
        st.write(f"Sloupce: {list(df.columns)}")
        if not df.empty:
            st.write("**Uk√°zka dat:**")
            st.dataframe(df.head())

if __name__ == "__main__":
    main()
